* Handle switch in focus to display final value
* Need to validate even on external changes (in ValidatingTextField)
* "/" key added to keyboard
* Consider https://developer.apple.com/documentation/swiftui/view/focused(_:) with a local focus state - can't do this when we need to force keypad to go away


* "Value too large" - > "no fabric for fold""

          .focused($focusedField, equals: .hip2)
          .onChange(of: focusedField) { isFocused in
            if designer.hipString.isEmpty { return }
            if isFocused != .hip2 {
              print("focus moved")
              do {
                print("hip2 = \(designer.hipString)")
                designer.hipString = try Value.parse(designer.hipString).formatted(.inches)
              } catch {
                print("can't happen")
              }
            }
          }

Fix error message (trailing ')') - simple fractions only (at most one '/'
* Should Value really have .error types? Ok for computation but not I/O
* Use new formatter approach throughout calculator & UI
* May need 8th-fraction formatter or accept unitless values as inches
* Should 1.2.3 produce 1-2/3? Fits with decimal pad, just as non-standard as / :) - or "/" above numeric pad

https://stackoverflow.com/questions/61073146/swiftui-validate-input-in-textfields

* Refactor!! :)
Editing fractions in TextField

* Remember the last tab and go back to it on startup

* Compute labeled picture from form changes (animate?)

* A/P: Apron/Pleat

* Save scenarios

* Idea: show memory value in history too

* Comma in long numbers

History
* Print history
  + https://www.hackingwithswift.com/example-code/uikit/how-to-print-using-uiactivityviewcontroller
  + https://thomas.skowron.eu/blog/printing-with-swiftui/
* Let users type into history?
* Store history, restore on app restart

Syntax
* Make calculator have a state machine for valid expressions (not including balancing parentheses) - or state machine plus parenthesis counter
* Disable calculator buttons that can't be used (e.g., no ')' if there's not been a '(')
* Ways to show parends need work - hint counter? grayed-out right parends? long press to close all? automatically insert?
* If you start with an operator, you should load the previous result as the first operand (?) - or pointing hand to previous result?

* Dark or light mode (remove ContentView .preferredColorScheme(.light))

* Accessibility
* I18N

EGTest
* Update EGTest to take new check() with try from ContentViewTests
* Update EGTest with EGAssert
* Add EGAssert(actual, eg)
* Let check use varargs rather than []
* For a test that can throw, can we continue after EGAssert throws?
* Have EGAssertThrows?

CALC-23-33: 2023-07-19
* Add focus tracking back to each field so internal & external update correctly
  + Failing test case: hip=20, sett=6 => 20/2.  Change pleat width to 3, it changes hip to 30 and #pleats to 15 AND pleat width to 2 - but expected #pleats = 10 - Fixed
  + Fields don't adjust when the bound value changes - Fixed
* Make pleat count update pleat width and possibly hip measure
  + How do we update pleat count when pleat width changes? What if pleat count is nil? - check for pleat > fabric
* Make pleat width update pleat count and possibly hip measure
* Delete dead code in PleatValidator.requiredSmaller

CALC-23-32: 2023-07-18 - Working on Validation
* Setts/pleat gets an initial value
* Replace existing fields: pleats
* Make ValidatingTextField know whether it's disabled
  + Should #pleats & pleat width have warnings before they're active? No
* Update how pleat count updates pleat width
* Replace existing fields: pleat width
* Delete PleatDesigner.hipString (dead code)
* Make ValidatingTextField track its focus state

CALC-23-31: 2023-07-17
* Create a ValidatingTextField
* Handle parser errors in pleat designer textfields
  - split parser validation and value validation, but have an error string that shows whichever is present
* Make existing fields use ValidatingTextField: Hip, sett, setts/pleat

CALC-23-30: 2023-07-13 - Throw in PleatDesigner
* Devise an approach to validating a field - catching both parse errors and semantic errors
  - We're closing in on it

CALC-23-29: 2023-07-12 - Throw or Value.error?
* Make Expression.evaluate() just throw rather than push errors on stack
* Made ValueParseStrategy throw exception string when it finds an error

CALC-23-28B: 2023-07-11 - Calculate Pleats Using Values
* Convert pleat designer to work in Value, not int/double
* Make round() a method on value, abs, isPositive
* Make gap and total fabric show up as fractions
* Force pleatCount to be integral
* Make Expression evaluate() throw errors rather than push error values on the stack [part of eliminating Value.error()]

CALC-23-28: 2023-07-10 - Textfield with Fractions
* [bonus session] Debugged issue with yard-feet-inch formatter not working
* [off camera] Hip can flex, #pleats stays a whole number (user feedback)
* Failed attempt to make the field() generic over int or double
* Input vs output format: must be able to re-parse any output - fixed problems with circled + and -, and bullet point
* Use new parser setup with Hip to Hip measure - now working as a Value

CALC-23-27: 2023-07-06 - Fractions on the Pleat Tab
* Make Value's parser conform to ParseStrategy
* Add ValueFormatStyle inside Value
* Make ValueFormatStyle support ParseableFormatStyle
* Try to switch UI to use the new approach [got stuck debugging at end of session]
* Fix it so value formatter uses the right formatter [bonus session]

CALC-23-26: 2023-07-05 - Pleat Errors
* Gap vs overlap - negative gap is an overlap (change the label & show the absolute value)
* negative values for any required values, #pleats, pleat width
* pleat width must be < sett*sett/pleat
* non-integral pleat count

CALC-23-25: 2023-07-04 - Pleat Width and Count
* [off camera] Tweak button look, add animation, and add empty page for Apron/Pleat
* Calculate gap and pleatFabric on demand
* Straighten out pleatWidth and pleatCount for cases where nil involved
* Calculate total yardage for pleats
* Messages - Identify the type of pleat (box pleat etc.)
* Show message when error string non-empty

CALC-23-24: 2023-07-03 - Box Pleat Constraints
* Is gap an output only? Yes
* Make Calculator and Pleats be separate tabs
* Set the sett, settsPerPleat, and hip - required fields
* Calculate gap and pleatFabric
* Set pleatWidth, pleatCount (coordinated to each other)

CALC-23-23: 2023-06-29 - Box Pleat Calculations
* Moved our calculation fields into a new PleatDesigner object
* Made the form depend on a PleatDesigner
* We added didSet methods to fields to maintain the constraints

CALC-23-22: 2023-06-28 - Box Pleats
* We built a simple form with the fields needed for pleat calculations
* We built a drawing of a single pleat
* We left off drawing extension lines for it

CALC-23-21: 2023-06-27 - Memory Errors
Memory Keys
* M+ / M- shouldn't mix numbers & units - report error
* M+ error messages to message field; shown as alert
* Make HistoryItem hold one string only
* Make M+ add "↳ M+" to history
* Change history to put =>M+ at end of line for M+
* M-

Error Reporting
* Error messages to errorMessage in Calculator
* How do error messages interact with history? No history when there was an error, and input still there so you can revise it

CALC-23-20: 2023-06-26 - Memory Keys
* [off camera] Add !today command to twitch stream

Memory Keys
* M+ and MR - for integers - add a .value Entry
* Handle zero mixed with units
* M+ and MR - with units

CALC-23-19: 2023-06-22 - Refactor Value; Add Memory
* [off camera] Updated test template from @qcoding

Memory Keys
* Refactor parse-related methods in Value
* M+
* Started MR

CALC-23-18: 2023-06-21 - History
Off Camera
* Drop %

History
* Don't show history after start
* History (a scrollable view with all expressions)
* Clear history
* Delete individual history items
* split big regex
* Punted on storing or printing history

Refactor Fractions
* Drop / or // only (enter fractions)

CALC-23-17: 2023-06-20 - Whole Numbers and Fractions
Entering Fractions
* decimal point - 314.15
* implicit 8ths - 314.1/
* implicit 16ths - 314.1//
* explicit fraction - 314.1/5

Look and Feel
* Bold "display in"

CALC-23-16: 2023-06-19 - Entering Fractions
* [off camera] Converted all ContentViewTests to CalculatorTests
* [off camera] Moved EG extensions to EGTest+extensions.swift
* [off camera] Eliminated ViewInspector and restored Grid
* [off camera] Tweaked logo - red stripes, yellow text
* [off camera] Released beta to my (one:) user
* Switch "/" and "+/-"
* implicit 16ths - 314//
* implicit 8ths - 314/
* 314/15        — explicit fraction (note that 1/2/3 is error)
* Started on point

CALC-23-15: 2023-06-15 - Rounding Units
[off camera] Gave CalculatorTests a mini-language for expressions (like ContentViewTests has); switched to EG tests
[off camera] Made EGAssert that takes actual value and EG
[off camera] Added background
* Rounding: Make unit formatter use the new numeric formatting
* Added a one-expression history display
* Tweaked look of background and buttons

CALC-23-14: 2023-06-14 - Rounding to 8ths and 16ths
* modf
* Round to 8ths and 16ths
* Rounding should be to 16ths, but simplifying any even 8ths (12/16 => 6/8)
* Show "skosh" characters - ⊕ (rounded down), ⊖ (rounded up)

CALC-23-13: 2023-06-13 - Choose Units for Display
* [Off camera: Tweak "Show As" wording]
* [Off camera: rename to KiltCalc]
* [Off camera: Add onDisplay() as per ViewInspector instructions about @State - but still have intermittent failures]

Unit Display
* Set unit display format with picker; default to inches

Rounding
* Rounding picker (1/8, 1/16 to start)
* Rounding to 8ths mostly done - still need to test corner cases
* [Off camera: make CalculatorTests use number() where it simplifies tests]

CALC-23-12: 2023-06-12 - (Unbalanced Parentheses))
* Parenthesis error checking
* Make evaluate pull sequence of number and unit into a value, so all the operators don't have to check for it
* Did a little exploration of why UI tests are slow (inconclusive)
* Add a picker for "show as" - either inches or yards-feet-inches (UI only)

CALC-23-11: 2023-06-07 - Negation
* Remove Operator.make()
* Plus-or-minus -  5 +/- => -5
* Error for +/- first or after an operator
* Replace .add etc with .binary
* Test +/- with 0
* Parentheses - without error checking

CALC-23-10: 2023-06-06 - Exceptional Numbers
* Infinity and NaN for operators
* Give Value the four operators +-*/; use for Operator
* Make Entry operators hold an Operator

CALC-23-09: 2023-06-05 - Backspace
* Implement the backspace key
* Introduce an "Entry" enum for the types of elements like number or operator
* Reorganize Keypad to return an Entry, Calculator to use it and store it in InputBuffer.
* Display negative numbers - 0in-17in=  -1 ft -5 in
* Started moving Operator into Entry

CALC-23-08: 2023-06-01 - Parse and Evaluate at '='
* Change input as String to [String]
* Change input to be a Stack<String>
* Type the whole expression before = evaluates
* Eliminate pending & lastOperator in Calculator
* Introduced Expression and InputBuffer types
* No purple errors today, so we're assuming we've fixed it

CALC-23-07: 2023-05-31 - Full Unit Input
* Make Keypad a struct
* Try to eliminate purple runtime errors by removing @StateObject from ContentViewTests
* Add spaces before and after units
* Make "ft 3 in 2" == "3 ft 2 in" for input
* "ft=" should be error
* What about "3 yd ft 2 in"? (Should only take last unit)
* What about "5 ft 2" - is an error
* Show most recent operator in the display
* If you hit two operators in a row, the last one should win
* Developed an input buffer, with simple editing, that captures the whole expression

CALC-23-06: 2023-05-30 - Associativity
* [Off camera] Improve system tests to accept all keystrokes and show file/line of errors
* Simplify Value.plus
* Stack object
* Operator objects
* Subtraction - check that associativity is correct
* Multiplication - check that precedence is correct
* Split out a separate result so the display shows it when the operand stack is empty - and that result starts with 0.

CALC-23-05: 2023-05-29 - Yards-Feet-Inches Input
* Parse yard/feet/inches
* Error handling on display side - give .error a string
* Addition with units
* Simple subtraction (no associativity yet)
* Simplify our system tests
* Tried but failed to eliminate purple errors - made Keypad press pass the calculator instead of doing it in the init

CALC-23-04: 2023-05-25 - Yards-Feet-Inches
* Changed Regex to use /notation/ and eliminate try-catch
* Make all units in inches
* Move parsing to Value
* Introduce ImperialFormatter to display unit values properly
* Display as yards-feet-inches

CALC-23-03: 2023-05-24 - Enter Units
* Switched Calculator to separate "pending" (entered string) from display
* Make display pull from either pending or value
* The = evaluates a pending into a value if needed
* What if you enter multiple leading zeros? They go away when you hit =.
* Handle invalid input
* Allow entering inches

CALC-23-02: 2023-05-23 - ViewInspector Tests
* Off camera: installed SwiftLint, fixed its warnings
* Off camera: remove unused UI tests
* Check that = properly resets the display
* Create ViewInspector test to check digit keypress
* Make uncommitted number be in italics
* Clear key
* Use Buttons on keys

CALC-23-01: 2023-05-22 - Introducing InchCalc
InchCalc - new project
* Created Key, Keypad, and Calculator
* Created initial view
* Reorganize how Calculator and Keypad are owned
* Test Key.action
